for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
i^2 #break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print( i^2 )#break
}
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
for (i in number){
if(i ==6){
next
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print()
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
##1
for (i in 1:10){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
numbers2 <- 1:3
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
#Example---
i = 10
while(i <= 10000000){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i *2
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i
i
i
i
i
i = 10
i
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i ==  2500){
break;}
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i = 2500){
break;}
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 3){
break;}
print (i^2)
i = i + 1
}
i = 1
i = 1
while(i <= 10){
if(i == 5){
i=i+1
next;
}
print (i^2)
i = i + 1;
}
numbers <- c( 1:10)
##1
for (i in 1:10){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
1:length(numbers))
1:length(numbers)
numbers <- c( 22,12,1:10)
numbers
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
1:length(numbers)
numbers2 <- 1:3
numbers2
numbers2 <- c(5,6,7)
numbers2
numbers2
numbers
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- c(2,4,9,6,15,78)
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
numbers
#WHILE LOOPS------------------------------------
#Syntax---
while(condition){
statement/execution
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 3){
break;}
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 5){
i=i+1
next;
}
print (i^2)
i = i + 1;
}
#Example
addsTen <- function(numbers){
numbers+10
}
addsTen(25)
numbers
addsTen(numbers)
sum <- 0
sum <- 0
repeat{
sum= sum+1
print(sum)
}
repeat{
sum= (sum+1)^2
print(sum)
}
sum
sum <- 0
sum
repeat{
sum= sum+1
print(sum)
if(sum==101){
print("the loop ends here!")
break
}
}
REPLICATE FUNCTION ------
#Syntax
rep(value,numberOfTimes)
#REPLICATE FUNCTION ------
#Syntax
rep(value,numberOfTimes)
# #Building custom functions----
# #Syntax
# functionName <- function(input){
#   execution
# }
#
# #Example
# addsTen <- function(numbers){
#   numbers+10
# }
#
# addsTen(25)
# addsTen(numbers)
#
#
#
#
# #REPEAT FUNCTION ------
# #Syntax
# repeat{
#   if(condition){
#     break
#   }
# }
#
# #Example
#
# sum <- 0
#
# repeat{
#   sum= sum+1
#   print(sum)
#   if(sum==101){
#     print("the loop ends here!");
#     break
#   }
# }
#
#
# #REPLICATE FUNCTION ------
# #Syntax
# # rep(value,numberOfTimes)
# # rep(seq,each,numberOfTimes)
#
# #Examples
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#Examples
rep(13,5)
rep(12, len = 5)
rep(1:3, len = 5)
rep(1:3, 5)
addsTen
rep(addsTen(20),5)
rep(names <- list(names = c(Carlvin,ZIppy,James)),3)
list(names = c(Carlvin,ZIppy,James))
list(names = c('Carlvin','ZIppy','James'))
rep(names <- list(names = c('Carlvin','ZIppy','James')),3)
names <- list(names = c('Carlvin','ZIppy','James'))
rep(names,3)
25+10
numbers
numbers + 10
getwd()
setwd("J:\\Personalprojects\\Teaching-Resources\\ClassR")
setwd("J:\Personalprojects\Teaching-Resources\ClassR")
setwd("J:/Personalprojects/Teaching-Resources/ClassR")
"J:/Personalprojects/Teaching-Resources/ClassR"
mtcars %>%
ggplot2::ggplot(aes(wt, mpg, colour = mpg))+
geom_line(size = 1.5)+
scale_colour_gradient(low = "#6a0dad", high = "#FF0000")
library(dplyr)
mtcars %>%
ggplot2::ggplot(aes(wt, mpg, colour = mpg))+
geom_line(size = 1.5)+
scale_colour_gradient(low = "#6a0dad", high = "#FF0000")
library(ggplot2)
tcars %>%
ggplot2::ggplot(aes(wt, mpg, colour = mpg))+
geom_line(size = 1.5)+
scale_colour_gradient(low = "#6a0dad", high = "#FF0000")
mtcars %>%
ggplot2::ggplot(aes(wt, mpg, colour = mpg))+
geom_line(size = 1.5)+
scale_colour_gradient(low = "#6a0dad", high = "#FF0000")
#Bar Charts
barplot() #Horizontal/Vertical
#Syntax
barplot(data, xlab,ylab,main, names.arg,col)
data
agesData
ages
#Example-basic bar plot
agesData <- ages
barplot(agesData$Age)
#Add labels/ colors
barplot(agesData$Age, xlab = "Name", ylab = "Age", main = "Plotting Ages", col = c("Blue","red","green"),
border = c("red","green","blue"))
#Make chart horizontal & Argument names
barplot(agesData$Age, xlab = "Name", ylab = "Age", main = "Plotting Ages", col = c("Blue","red","green"),
border = c("red","green","blue"), horiz = T, names.arg = agesData$Name )
#Stacked Bar Chart
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main = "Cars distribution by Gears and Vs", ylab = "Number of Cars", xlab = "Gears",
col = c("blue","red"), legend= rownames(counts))
#Grouped bar chart
barplot(counts, main = "Cars distribution by Gears and Vs", ylab = "Number of Cars", xlab = "Gears",
col = c("blue","red"), legend= rownames(counts), beside = T )
mpg ~ cyl
#Creating a box plot
boxplot(mpg ~ cyl, data = mtcars, xlab = "No. Of Cylinders", ylab = "Miles Per Gallon", main ="Car Mileage")
#Add a notch to see how medians relate to each other
boxplot(mpg ~ cyl, data = mtcars, xlab = "No. Of Cylinders", ylab = "Miles Per Gallon", main ="Car Mileage", notch = T)
#Add a notch to see how medians relate to each other
boxplot(mpg ~ cyl, data = mtcars, xlab = "No. Of Cylinders", ylab = "Miles Per Gallon", main ="Car Mileage", notch = T, col = c("Blue","red","green"))
#Add a notch to see how medians relate to each other
boxplot(mpg ~ cyl, data = mtcars, xlab = "No. Of Cylinders", ylab = "Miles Per Gallon", main ="Car Mileage",names = c("High", "Medium", "Low"),
notch = T, col = c("Blue","red","green"))
#Add a notch to see how medians relate to each other
boxplot(mpg ~ cyl, data = mtcars, xlab = "No. Of Cylinders", ylab = "Miles Per Gallon", main ="Car Mileage",names = c("High", "Medium", "Low"),
notch = F, col = c("Blue","red","green"))
AirPassengers
#Plot a histogram
hist(AirPassengers,main= "Air Passengers", xlab = "Passengers", ylab = "Frequency",border = "black", col = "red" )
c(100, 800)
#Plot a histogram
hist(AirPassengers,main= "Air Passengers", xlab = "Passengers", ylab = "Frequency",border = "black", col = "red", xlim = c(100, 800) , breaks = 5)
#Plot a histogram
hist(AirPassengers,main= "Air Passengers", xlab = "Passengers", ylab = "Frequency",border = "black", col = "red", xlim = c(100, 800) ,
breaks = 5, ylim= c(0,60))
# Line Plot
data <-  c(1:10, 5:23, 15:26)
data
plot(data)
plot(data, type = "l")
plot(data, type = "P")
plot(data, type = "P")
plot(data, type = "p")
plot(data, type = "l")
plot(data, type = "o") #Both
plot(data, type = "o", xlab = "Ksh", ylab = "Day", main= "Expenditure Data", col = "green")
plot(data, type = "o", ylab = "Ksh", xlab = "Day", main= "Expenditure Data", col = "green")
#Multiple line plots on a chart
data2 <-  c(1:15, 15:2, 3:26)
data2
lines( data2, type = "o", col="red")
lines( data2, type = "p", col="red")
plot(data, type = "p", ylab = "Ksh", xlab = "Day", main= "Expenditure Data", col = "green")
lines( data2, type = "p", col="red")
plot(data, type = "l", ylab = "Ksh", xlab = "Day", main= "Expenditure Data", col = "green")
lines( data2, type = "l", col="red")
# set up cut-off values
breaks <- c(0,2,4,6,8,10,12,14,16,18,20)
# specify interval/bin labels
tags <- c("[0-2)","[2-4)", "[4-6)", "[6-8)", "[8-10)", "[10-12)","[12-14)", "[14-16)","[16-18)", "[18-20)")
# bucketing values into bins
group_tags <- cut(
breaks=breaks,
include.lowest=TRUE,
right=FALSE,
labels=tags)
df <- data.frame()
# bucketing values into bins
group_tags <- cut(df$age,
breaks=breaks,
include.lowest=TRUE,
right=FALSE,
labels=tags)
df <- data.frame(count = c(1:10))
# bucketing values into bins
group_tags <- cut(df$count,
breaks=breaks,
include.lowest=TRUE,
right=FALSE,
labels=tags)
group_tags
# inspect bins
summary(group_tags)
education_groups <- factor(group_tags,
levels = labels,
ordered = TRUE)
group_tags
class(group_tags)
