cols
Matrix[,cols]
Matrix[,1,2]
Matrix[,1:2]
Matrix[,c(1:2)]
88
Matrix[8:12,] #Pick multiple rows
Matrix[c(8:12),c(1:2)]
#LISTS
zipy <- list(Surname="Mukami", Age=78, height = 8.9)
zipy
humans <- list(Surnames=c("Mukami", "Mwange"), Age=c(78,56), heights =c(8.9, 5.7))
humans
#LISTS-----
#Ordered collections of vectors
zipy <- list(Surname <- "Mukami", Age<-78, height = 8.9)
zipy
#LISTS-----
#Ordered collections of vectors
zipy <- list(Surname = "Mukami", Age=78, height = 8.9)
humans <- list(Surnames=c("Mukami", "Mwange"), Age=c(78,56), heights =c(8.9, 5.7))
#Access components of a list
humans$Surnames
humans$heights
humans$heights[2] #Pick  vector of heights
class(humans)
class(matrixTwo)
class(values)
values2<- c("abcd",1)
class(values2)
as.data.frame(matrixTwo)
class(as.data.frame(matrixTwo))
Numbers <- c(1:10)
Numbers
FIVE = 5
FIVE
FIVE
#Character vector ----
Characters <- c("Boy", "Dog", "Three", "House", "Five")
Characters
matrix(1:100, nrow = 25, ncol = 6)
#Matrix Vector ----
#A (5x4) matrix has 5 rows and 4 columns
Matrix <- matrix(1:100, nrow = 25, ncol = 4)
Matrix
zipy <- list(Surname = "Mukami", Age=78, height = 8.9)
zipy
humans <- list(Surnames=c("Mukami", "Mwange"), Age=c(78,56), heights =c(8.9, 5.7))
humans
humans <- list(Surnames=c("Mukami", "Mwange","boy","trwu","cow","dog"), Age=c(78,56,7,87,434,42), heights =c(8.9, 5.7,8.9,8.9,8.9,8.9))
humans
Names <- c("Carlvin","Zipy","Uhunye", "Obako")
Ages <- c(45,34,23,15)
Heights <- c(4.5,4.9,7.3,1.2)
humansDf <-  data.frame(Names,Ages,Heights)
humansDf
#WORKING WITH DATAFRAMES----
#Accessing/picking values from a DF
#Picking a column
humansDf[,c(1:4)]
#WORKING WITH DATAFRAMES----
#Accessing/picking values from a DF
#Picking a column
humansDf$Names
class(humansDf$Names)
humansDf <-  data.frame(Names,Ages,Heights, stringsAsFactors = FALSE)
humansDf
#WORKING WITH DATAFRAMES----
#Accessing/picking values from a DF
#Picking a column
humansDf$Names #Access by column name
humansDf[,1]
dfdsgs <- nrow(humansDf) #Number of rows in a dataframe
dfdsgs
nrow(humansDf) #Number of rows in a dataframe
humansDf
ncol(humansDf)
dim(humansDf)
humansDf$Ages[1:3]
humansDf[,3]
df2<- data.frame(humansDf$Ages[1:3],humansDf[,3][1:3])
df2
data.frame(Ages = humansDf$Ages[1:3],Heights = humansDf[,3][1:3], stringsAsFactors = F)
df2<- data.frame(humansDf$Ages[1:3],humansDf[,3][1:3], stringsAsFactors = F)
df2
#Renaming columns in a dataframe
colnames(df2)
colnames(df2)
#Use Base R
colnames(df2)[1:2]
#Use Base R
colnames(df2)[1:2] <- c("Ages","Heights")
df2
#Use a package
library(dplyr)
df2
df2 %>% rename(Ages= "YrsOld",Heights="HowTall?") %>% colnames()
#Use a package
library(dplyr)
install.packages("dplyr")
#Use a package
library(dplyr)
df2
df2 %>% rename(Ages= "YrsOld",Heights="HowTall?")
df2 %>% rename( "YrsOld" = Ages,"HowTall?"=Heights)
df2 %>% rename( "YrsOld" = Ages,"HowTall"=Heights) %>% colnames()
df2 %>% rename( "YrsOld" = Ages,"HowTall"=Heights)
df2 %>% rename( "YrsOld" = Ages,"HowTall"=Heights) %>% colnames()
#Renaming columns in a dataframe-----
colnames(df2) #Checks all column names in a df
#Adding rows and columns onto a df-----
df2
df2$Heights
#Adding rows and columns onto a df-----
df2$Weight <- c("73Kg","45Kg","49Kg")
df2
Occupation <- c("Doctor", "Pilot", "President")
Occupation
df2
df2 <- cbind(df2,Occupation)
df2
Name <- c("A","B","C")
data.frame(Name,Occupation)
cbind(Name,Occupation)
data.frame(Name,Occupation, stringsAsFactors = F)
df3$Numbers <- Occupation
df2
four<- c(50,5.5,"78Kg","Thief")
four<- c(50,5.5,"78Kg","Thief","yuy")
rbind(df2,four)
four<- c(50,5.5,"78Kg","Thief")
rbind(df2,four)
four
rbind(df2,four)#Add a row by binding rbind()
df
df1
df2
cbind(df1,
df2)
df1
df2
rbind(df1,
df2)
#Useful Functions-----
length(df2)#Checks the number of elemens/components in an object
str(df2) #Checks the structure of an object
df3
df1
df3 <- df1
df
df3
ls() #Lists current objects
rm(df3) #Removes listed objects
ls() #Lists current objects
newdf <- edit(df1)
newdf <- edit(df1)
newdf
fix(newdf)
newdf
#Example
number <- 25
if(number > 10){
print("The number is greater than 10")
}
if (number >= 0){
print("The number is positive")
}else{
print("The number is negative")
}
# if(expression){
#   statement/execution1
# }
# else
# {
#   statement/execution2
# }
number <- -25
if (number >= 0){
print("The number is positive")
}else{
print("The number is negative")
}
number
if(number <0 ){
print("This is a negative number")
}else if (number > 0){
print("This is a positive number")
}else{
print("This is zero")
}
#Apply to DF-----
ages <- data.frame(Name = c("Zippy","Carlvin", "James"), Age = c(56,76,18), Salary = c(50000,20000,7000))
#Apply to DF-----
taxes <- data.frame(Name = c("Zippy","Carlvin", "James"), Age = c(56,76,18), Salary = c(50000,20000,7000))
taxes
library(dplyr)
library(tidy)
library(dplyr)
taxes
mutate(taxes, ShouldBeTaxed = ifelse(Age >= 18 & Salary >= 10000, "YES", "NO"))
#Apply to DF-----
taxes <- data.frame(Name = c("Zippy","Carlvin", "James", "RichKid", "Hustler"), Age = c(56,76,18,16,18), Salary = c(50000,20000,7000, 100000, 11000))
library(dplyr)
mutate(taxes, ShouldBeTaxed = ifelse(Age >= 18 & Salary >= 10000, "YES", "NO"))
filter(taxes, Age >= 18)
filter(taxes, Age >= 18 & Salary >= 10000)
taxes
filter(taxes, Age >= 18 & Salary >= 10000)
filter(taxes, Age >= 18 & Salary >= 10000)
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class = ifelse( Salary > 20000, "A",
ifelse(20000 < salary >=15000, "B",
ifelse(15000<Salary>=10000, "C", "X"))))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(salary >=15000 & Salary < 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary < 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary <= 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses
getwd()
number <- 25
if(number > 10){
print("The number is greater than 10")
}
number <- -25
if (number >= 0){
print("The number is positive")
}else{
print("The number is negative")
}
#Apply to DF-----
taxes <- data.frame(Name = c("Zippy","Carlvin", "James", "RichKid", "Hustler"), Age = c(56,76,18,16,18),
Salary = c(50000,20000,7000, 100000, 11000))
taxes
library(dplyr) #Load dplyr package for data manipulation.
library(tidyVerse)
library(tidy)
library(tidyr)
library(dplyr) #Load dplyr package for data manipulation.
mutate(taxes, ShouldBeTaxed = ifelse(Age >= 18 & Salary >= 10000, "YES", "NO"))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary <= 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000,
"C", "X"))))
taxClasses
1:10
print(i ^ 2)
squares <-
for (i in 1:10){
print(i ^ 2)
}
squares <- for (i in 1:10){
print(i ^ 2)
}
numbers <- c(1,2,5,7,8,34,5)
numbers
length(nubers)
numbers <- c(1,2,5,7,8,34,5)
getwd()
1:10
1:length(numbers)
length(numbers)
numbers
numbers <- c(,5)
numbers[5]
1:length(numbers)
#2
for (i in 1:10){
print(i ^ 2)
}
#2
for (i in numbers){
print(i ^ 2)
}
numbers
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
numbers
print(i + j)
for(i in 1:numbers){
for (j in 1:3){
print(i + j)
}
}
numbers
1:3
for(i in 1:numbers){
for (j in 1:3){
print(i + j)
}
}
1:numbers
1:10
for (i in 1:10){
print(i ^ 2)
}
numbers <- c( 1:10)
#2
for (i in numbers){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
1:length(numbers)
numbers
1:3
1:10
1:length(numbers)
numbers
numbers
1:length(numbers)
1:numbers
numbers2 <- 1:3
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
i^2 #break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print( i^2 )#break
}
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
for (i in number){
if(i ==6){
next
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print()
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
##1
for (i in 1:10){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
numbers2 <- 1:3
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
#Example---
i = 10
while(i <= 10000000){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i *2
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i
i
i
i
i
i = 10
i
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i ==  2500){
break;}
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i = 2500){
break;}
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 3){
break;}
print (i^2)
i = i + 1
}
i = 1
i = 1
while(i <= 10){
if(i == 5){
i=i+1
next;
}
print (i^2)
i = i + 1;
}
