ifelse(20000 < salary >=15000, "B",
ifelse(15000<Salary>=10000, "C", "X"))))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(salary >=15000 & Salary < 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary < 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary <= 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000, "C", "X"))))
taxClasses
getwd()
number <- 25
if(number > 10){
print("The number is greater than 10")
}
number <- -25
if (number >= 0){
print("The number is positive")
}else{
print("The number is negative")
}
#Apply to DF-----
taxes <- data.frame(Name = c("Zippy","Carlvin", "James", "RichKid", "Hustler"), Age = c(56,76,18,16,18),
Salary = c(50000,20000,7000, 100000, 11000))
taxes
library(dplyr) #Load dplyr package for data manipulation.
library(tidyVerse)
library(tidy)
library(tidyr)
library(dplyr) #Load dplyr package for data manipulation.
mutate(taxes, ShouldBeTaxed = ifelse(Age >= 18 & Salary >= 10000, "YES", "NO"))
taxClasses <- filter(taxes, Age >= 18 & Salary >= 10000) %>% mutate(Class =
ifelse( Salary > 20000, "A",
ifelse(Salary >=15000 & Salary <= 20000 , "B",
ifelse(Salary>=10000 &  Salary < 15000,
"C", "X"))))
taxClasses
1:10
print(i ^ 2)
squares <-
for (i in 1:10){
print(i ^ 2)
}
squares <- for (i in 1:10){
print(i ^ 2)
}
numbers <- c(1,2,5,7,8,34,5)
numbers
length(nubers)
numbers <- c(1,2,5,7,8,34,5)
getwd()
1:10
1:length(numbers)
length(numbers)
numbers
numbers <- c(,5)
numbers[5]
1:length(numbers)
#2
for (i in 1:10){
print(i ^ 2)
}
#2
for (i in numbers){
print(i ^ 2)
}
numbers
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
numbers
print(i + j)
for(i in 1:numbers){
for (j in 1:3){
print(i + j)
}
}
numbers
1:3
for(i in 1:numbers){
for (j in 1:3){
print(i + j)
}
}
1:numbers
1:10
for (i in 1:10){
print(i ^ 2)
}
numbers <- c( 1:10)
#2
for (i in numbers){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
1:length(numbers)
numbers
1:3
1:10
1:length(numbers)
numbers
numbers
1:length(numbers)
1:numbers
numbers2 <- 1:3
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
i^2 #break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print( i^2 )#break
}
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
print (i)
}
for (i in numbers){
if(i == 6){
break
}
print (i)
}
for (i in number){
if(i ==6){
next
}
}
#BREAKING LOOPS----
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print()
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
##1
for (i in 1:10){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
numbers2 <- 1:3
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
#Example---
i = 10
while(i <= 10000000){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i *2
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i + 1
}
#Example---
i = 10
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i
i
i
i
i
i = 10
i
while(i <= 100){
if(i ==  2500)
break;
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i ==  2500){
break;}
print (i^2)
i = i + 1
}
i = 10
while(i <= 100){
if(i = 2500){
break;}
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 3){
break;}
print (i^2)
i = i + 1
}
i = 1
i = 1
while(i <= 10){
if(i == 5){
i=i+1
next;
}
print (i^2)
i = i + 1;
}
numbers <- c( 1:10)
##1
for (i in 1:10){
print(i ^ 2)
}
#2
for (value in numbers){
print(value ^ 2)
}
1:length(numbers))
1:length(numbers)
numbers <- c( 22,12,1:10)
numbers
#3
for(i in 1:length(numbers)){
print(numbers[i]^2)
}
1:length(numbers)
numbers2 <- 1:3
numbers2
numbers2 <- c(5,6,7)
numbers2
numbers2
numbers
for(i in numbers){
for (j in numbers2){
print(i + j)
}
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- 1:10
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
#BREAKING LOOPS----------
#Breaking statement
numbers <- c(2,4,9,6,15,78)
for (i in numbers){
if(i == 6){
print(i * 2)
break
}
print (i)
}
for (i in numbers){
if(i ==6){
next
}
print(i)
}
numbers
#WHILE LOOPS------------------------------------
#Syntax---
while(condition){
statement/execution
}
#Example---
i = 10
while(i <= 100){
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 3){
break;}
print (i^2)
i = i + 1
}
i = 1
while(i <= 10){
if(i == 5){
i=i+1
next;
}
print (i^2)
i = i + 1;
}
#Example
addsTen <- function(numbers){
numbers+10
}
addsTen(25)
numbers
addsTen(numbers)
sum <- 0
sum <- 0
repeat{
sum= sum+1
print(sum)
}
repeat{
sum= (sum+1)^2
print(sum)
}
sum
sum <- 0
sum
repeat{
sum= sum+1
print(sum)
if(sum==101){
print("the loop ends here!")
break
}
}
REPLICATE FUNCTION ------
#Syntax
rep(value,numberOfTimes)
#REPLICATE FUNCTION ------
#Syntax
rep(value,numberOfTimes)
# #Building custom functions----
# #Syntax
# functionName <- function(input){
#   execution
# }
#
# #Example
# addsTen <- function(numbers){
#   numbers+10
# }
#
# addsTen(25)
# addsTen(numbers)
#
#
#
#
# #REPEAT FUNCTION ------
# #Syntax
# repeat{
#   if(condition){
#     break
#   }
# }
#
# #Example
#
# sum <- 0
#
# repeat{
#   sum= sum+1
#   print(sum)
#   if(sum==101){
#     print("the loop ends here!");
#     break
#   }
# }
#
#
# #REPLICATE FUNCTION ------
# #Syntax
# # rep(value,numberOfTimes)
# # rep(seq,each,numberOfTimes)
#
# #Examples
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#Examples
rep(13,5)
rep(12, len = 5)
rep(1:3, len = 5)
rep(1:3, 5)
addsTen
rep(addsTen(20),5)
rep(names <- list(names = c(Carlvin,ZIppy,James)),3)
list(names = c(Carlvin,ZIppy,James))
list(names = c('Carlvin','ZIppy','James'))
rep(names <- list(names = c('Carlvin','ZIppy','James')),3)
names <- list(names = c('Carlvin','ZIppy','James'))
rep(names,3)
25+10
numbers
numbers + 10
getwd()
setwd("J:\\Personalprojects\\Teaching-Resources\\ClassR")
setwd("J:\Personalprojects\Teaching-Resources\ClassR")
setwd("J:/Personalprojects/Teaching-Resources/ClassR")
"J:/Personalprojects/Teaching-Resources/ClassR"
